#!/usr/bin/env tclsh

package require yaml
package require http
package require tls
package require Tclx

#set cntrlc_flag 1

http::register https 443 [list ::tls::socket -autoservername true]


namespace eval tclp {
    variable configs   
    set deps "./.tcl"
    #signal trap SIGINT tclp::trap_ctrl_c
}

proc tclp::get {d args} {
    if {[dict exists $d {*}$args]} {
        dict get $d {*}$args
    } else {
        return {}
    }
} 

proc tclp::getdef {d args} {
    set def [lindex $args end]
    set params [lrange $args 0 end-1]
    if {[dict exists $d {*}$params]} {
        dict get $d {*}$params
    } else {
        return $def
    }
} 


proc tclp::trap_ctrl_c {} {
    debug "Aborting current routine"
    stop_all
    exit 0
}

 proc tclp::uniqkey { } {
    set key   [ expr { pow(2,31) + [ clock clicks ] } ]
    set key   [ string range $key end-8 end-3 ]
    set key   [ clock seconds ]$key
    return $key
 }

 proc tclp::sleep { ms } {
    set uniq [ uniqkey ]
    set ::__sleep__tmp__$uniq 0
    after $ms set ::__sleep__tmp__$uniq 1
    vwait ::__sleep__tmp__$uniq
    unset ::__sleep__tmp__$uniq
 }

#
# clear console
#
proc tclp::clear_term { } {
    puts "\x1B\x5B\x32\x4A\x1B\x5B\x30\x3B\x30\x48"
}

#
# get files checksum
#
proc tclp::get_checksum {} {
    set dir ./
    set filter *.tcl
    set working_path [pwd]
    set cmd [list find -L $working_path/$dir -type f -name $filter -exec md5sum \{\} \;]
    exec {*}$cmd
}

#
# run app entrypoint, restart on change
#
proc tclp::run {cmd} {
    set chsum1 ""
    set fd ""
    set pid "" 

    while {true} {
        set chsum2 [get_checksum]
        if {$chsum1 ne $chsum2} {
            clear_term
            debug "file changeg, restarting app.."
            set chsum1 $chsum2

            kill $pid

            set pid [exec {*}$cmd &]
            debug "app started!"
            sleep 1000
        }
    }    
}

proc tclp::upgrade {} {    
    set cmd [list curl https://raw.githubusercontent.com/mobilemindtech/tclp/refs/heads/master/tclp.tcl -s -o $::argv0]
    exec {*}$cmd
    debug "tclp upgraded to last version!"
}

#
# kill app by PID
#
proc tclp::kill {pid} {
    if {$pid != ""} {
        puts "kill $pid"
        exec {*}[list kill $pid]
        debug "app stoped!"
        sleep 300
    }    
}

# https://wuhrr.wordpress.com/2011/04/01/tcltest-part-3-include-and-exclude-tests/
proc tclp::test {argc argv} {

    variable configs
    
    set params ""

    if {$argc > 1} {

        if {[lindex $argv 1] == "--help"} {
            debug "Test usage:"
            debug "configure -file patternList"
            debug "configure -notfile patternList"
            debug "configure -match patternList"
            debug "configure -skip patternList"
            debug "matchFiles patternList = shortcut for configure -file"
            debug "skipFiles patternList = shortcut for configure -notfile"
            debug "match patternList = shortcut for configure -match"
            debug "skip patternList = shortcut for configure -skip"
            debug "See more at https://wiki.tcl-lang.org/page/tcltest"
            return
        }

        set params [lrange $argv 1 end]
    }

    
    set testdir [getdef $configs app testdir tests]

    set cmd [list sh -c "tclsh $testdir/all.tcl -testdir $testdir $params | tee /dev/tty"]
    exec {*}$cmd
}

#
#
proc tclp::init {argc argv} {

    init_empty_project

	#set with_seed_index [lsearch $argv "--seed"]
	#if {$with_seed_index > -1} {
	#	init_with_seed $argv $with_seed_index
	#} else {
	#	init_empty_project
	#}
}

# init empty build.yaml
proc tclp::init_empty_project {} {
	set build_file "./build.yaml"

    if {[file exists $build_file]} {
        debug "build.yaml already exists"
    } else {

        set fd [open $build_file w+]
        puts $fd $::templates::build-file
        close $fd
        puts "$build_file created!"
    }	
}

proc tclp::init_with_seed {argv seed_index} {
    set idx [expr {$seed_index + 1}]

	if {$idx >= [llength $argv]} {
		return -code error {seed url required}
	}

	
	set seed_url [lindex $argv $idx]

	set pname [lindex [split $seed_url /] end]
	set pname [lindex [split $pname .] 0]
	set cmd [list git clone $seed_url $pname | tee /dev/tty]
	catch {exec {*}$cmd}

    if {![file exists $pname/.git]} {
        return -code error {can't clone seed repository}
    }

	set cmd [list rm -rf ./$pname/.git]
    exec {*}$cmd

    set cmd [list cp -Rf $pname/* .]
    exec {*}$cmd

    set cmd [list rm -rf ./$pname]
    exec {*}$cmd

	debug {project succefull initialized!}
}

#
# read app configs
#
proc tclp::read_configs {} {
    set build_file ./build.yaml
    set configs {}
    if {[has_configs]} {        
        set fd [open $build_file]
        set configs [yaml::yaml2dict [read $fd]]
        close $fd  
        return $configs      
    }
    return {}
    # error "config $build_file file not found"
}

proc tclp::has_configs {} {
    file exists ./build.yaml
}

#
# run build
#
proc tclp::build {} {

    variable deps
    variable configs

    #set name [dict get $configs app name]
    #set description [dict get $configs app description]
    set dependencies [get $configs dependencies]
    set require_packages [get $configs requirements packages]
    set require_cmds [get $configs requirements cmds]

    debug "check packages requirements"
    foreach pack $require_packages {        
        if {[catch {package require $pack} err]} {
            debug "\[x\] package $pack not found"
            return
        } else {
            debug "\[ok\] package $pack found"
        }
    }

    debug "check cmds requirements"
    foreach cmd $require_cmds {        
        if {[catch {exec {*}[list sh -c $cmd]} err]} {
            debug "\[x\] command $cmd not found"
            return
        } else {
            debug "\[ok\] command $cmd found"
        }
    }

    foreach dep $dependencies {

        if {[string match https://* $dep]} {
            resolve_dependency_uri $dep
        } else {
            if {[dict exists $configs $dep]} {
                set dep_info [dict get $configs $dep]
                set uri [dict get $dep_info uri]
                set cmds [get $dep_info cmds]
                set imports [get $dep_info imports]

                set dirname [get_url_dirname $uri]
                if {[file exists $deps/$dirname]} {
                    debug "dependency $dep already exists"
                } else {

                    resolve_dependency_uri $uri

                    foreach cmd $cmds {
                        debug "run $cmd"
                        set cmd [list sh -c "cd $deps/$dirname && $cmd"]
                        set execution [catch {exec {*}$cmd} result]
                        if { $execution != 0} {
                            puts $result
                            return -code error "<tclp ::> can't run cmd $cmd"
                        }
                    }

                    foreach import $imports {
                        add_import $import
                    }
                }
            } else {
                error "dependency $dep not found"
            }
        }
    }

    set cmds [get $configs build cmds]
    foreach cmd $cmds {
        debug "run $cmd"
        exec $cmd
    }
}

#
# resove dependency uri
#
proc tclp::resolve_dependency_uri {uri} {

	variable deps

    create_deps_dir

	if {[string match *.tcl $uri]} {
		load_file_from_uri $deps $uri
	} elseif {[string match *github.com* $uri]} {
		load_lib_from_git $deps $uri
	}
}

#
# get dir name by url
#
proc tclp::get_url_dirname {uri} {
    set dirname [lindex [split $uri /] end]
    lindex [split $dirname .] end-1    
}

#
# run git clone dependency
#
proc tclp::load_lib_from_git {deps uri} {

	global auto_path


	set dirname [get_url_dirname $uri]

	if {[file exists $deps/$dirname]} {
        debug "dependency $dirname already exists"
    } else {
        debug "git clone $uri"
		set cmd [list git clone $uri $deps/$dirname | tee /dev/tty]
		if {[catch {exec {*}$cmd} results options]} {

            set err [dict get $options -errorcode]

            if {$err ne "NONE"} {                
                if {[file exists $deps/$dirname]} {
                    file delete -force -- $deps/$dirname
                }
                error "git clone error: $err"
            }

        }
        add_import "lappend ::auto_path $deps/$dirname" 
	}
    
    #puts "add autopath $deps/$dirname"
    lappend auto_path $deps/$dirname

}

#
# run download dependency file
#
proc tclp::load_file_from_uri {deps uri} {
	set filename [lindex [split $uri /] end]
	set file_path $deps/$filename
	if {[file exists $file_path]} {
        debug "dependency $filename already exists"
    } else {
		debug "downloading file $uri.."
		set token [http::geturl $uri]
		set data [::http::data $token]
		::http::cleanup $token
		set fd [open $file_path w+]
		puts $fd $data
		close $fd

        add_import "source $deps/$filename" 
	}
	
    #puts "use $deps/$filename"
    source $deps/$filename
}

#
# write import on deps.tcl
#
proc tclp::add_import {import} {
    variable deps
    set fd [open $deps/deps.tcl a+]
    puts $fd $import
    close $fd    
}

#
# create deps dir
#
proc tclp::create_deps_dir {} {
    variable deps
    if {![file exists $deps]} {
        file mkdir $deps
    }    
}

proc tclp::is_dict d {
    expr {[string is list $d]
        && !([llength $d] % 2)
        && ((2 * [llength [dict keys $d]]) == [llength $d])
    }
}

proc tclp::debug msg {
    puts ":: tclp> $msg"
}

proc tclp::create_pkg {pkg_name} {

    if {[file exists $pkg_name]} {
        debug "folder $pkg_name already exists"
        exit -1
    }

    file mkdir $pkg_name
    file mkdir $pkg_name/tests


    create_file_with $pkg_name $pkg_name/pkgIndex.tcl [dict get $::templates::lib pkg-index] 
    create_file_with $pkg_name $pkg_name/lib.tcl [dict get $::templates::lib lib]
    create_file_with $pkg_name $pkg_name/tests/all.test [dict get $::templates::lib tests all]
    create_file_with $pkg_name $pkg_name/tests/lib.test [dict get $::templates::lib tests lib]

    
    set build_contents [regsub -all -line {entrypoint} [dict get $::templates::build_file] {#entrypoint}]    
    create_file_with $pkg_name $pkg_name/build.yaml [join $build_contents \n]
}

proc tclp::create_app {app_name} {

    if {[file exists $app_name]} {
        debug "folder $app_name already exists"
        exit -1
    }

    file mkdir $app_name
    file mkdir $app_name/tests

    
    create_file_with $app_name $app_name/main.tcl [dict get $::templates::app main]
    create_file_with $app_name $app_name/tests/all.test [dict get $::templates::lib tests all]
    create_file_with $app_name $app_name/tests/main.test [dict get $::templates::app test]

    
    create_file_with $app_name $app_name/build.yaml [join [dict get $::templates::build_file] \n]
}

proc tclp::create_file_with {pkg_name file_name contents} {
    set fd [open $file_name w+]
    puts $fd [regsub -all -line {__app_name__} $contents $pkg_name]
    close $fd
}

#
# process app args
#
proc tclp::main {argc argv} {
    
    variable deps 
    variable configs    

    set param ""

    if {$argc > 0} {
        set param [lindex $argv 0]
    }


    set configs [read_configs]

    if {[has_configs]} {
        create_deps_dir
    }

    switch $param {
        init {
            init $argc $argv
        }
        build {
            set configs [read_configs]
            build
        }
        clean {
            if {[file exists $deps]} {
                file delete -force -- $deps
            }
        }
        run {
            run [dict get $configs app entrypoint]            
        }
        test {
            test $argc $argv
        }
        upgrade {
            upgrade
        }
        new {
            foreach {_ type name} $argv {

                if {$type == ""} {
                    debug "$type is required. use package or app"
                    exit -1
                }
                if {$name == ""} {
                    debug "$type name is required"
                    exit -1
                }

                switch $type {
                    package {
                        create_pkg $name
                    }
                    app {
                        create_app $name
                    }
                }
            }
        }
        default {

            set cfg_cmds [get $configs commands]
            set cmds [list]

            dict for {k v} $cfg_cmds {

                set label $k
                set cmd $v
                set forever false
                set cmd_args {}

                if {[string match *.* $k]} {
                    set keys [split $k \.] 
                    if {[lsearch $keys forever] > -1} {
                        set keys [lrange $keys 0 end-1]
                    }
                    set label [join $keys " "]
                }

                lappend cmds [dict create label $label cmd $cmd forever $forever]
            }            

            foreach it $cmds {

                set label [dict get $it label] 
                set cmd [dict get $it cmd] 
                set forever [dict get $it forever]

                set idx [lsearch $argv --]
                set user_cmd_label [join $argv " "]
                set user_cmd_args {}

                if {$idx > -1} {
                    set user_cmd [lrange $argv 0 $idx-1]
                    set user_cmd_label [join $user_cmd " "]
                    set user_cmd_args [lrange $argv $idx+1 end]
                }

                if {$label == $user_cmd_label} {

                    debug "run \{forever=$forever\}: $label -> $cmd $user_cmd_args"

                    if {$forever} {
                        run [list {*}$cmd {*}$user_cmd_args]
                    } else {
                        exec {*}[list {*}$cmd {*}$user_cmd_args | tee /dev/tty]
                    }
                    return
                }                
            }

            set labels [lmap it $cmds {dict get $it label}]
            puts "::> The TCL Project Manager"
            puts ""
            puts " Usage:"
            puts "  init: Create build.yaml in current folder"
            puts "  build: Build project"
            puts "  clean: Delete .tcl folder"
            puts "  run: Run project"
            puts "  test: Run project tests"
            puts "  upgrade: Upgrade tclp"
            puts "  new <package or app> <name>: Create packate or app project"
            if {[llength $labels] > 0} {
                puts ""
                puts "Custom commands:"
                puts " [join $labels { | }]"
            }
            puts ""
            puts " Use -- to pass extra cmd args"            
            puts ""
            exit 1
        }
    }
}

namespace eval ::templates {

    set app {

        main {source .tcl/deps.tcl
    

proc sum {x y} {
    expr {$x + $y}
}

proc main {argc argv} {
    puts "hello, tcl!"
}

main $argc $argv}
        
        test {package require tcltest

namespace import ::tcltest::*

source ../main.tcl

test test-sum {} -body {            
    sum 1 1
} -result 2

cleanupTests}
    
}

    set lib {

        pkg-index {package ifneeded __app_name__ 1.0 [list source [file join $dir lib.tcl]]}

        lib {source .tcl/deps.tcl

proc sum {x y} {
    expr {$x + $y}
}}

        tests {
            all {package require tcltest

namespace import ::tcltest::*

if {$argc != 0} {
    if {[lindex $::argv 0] eq "configure"} {
        foreach {action arg1 arg2} $::argv {
            $action $arg1 arg2
        }
    } else {
        foreach {action arg} $::argv {
            if {[string match -* $action]} {
                configure $action $arg
            } else {
                $action $arg
            }
        }
    }
}}

            lib {package require tcltest

namespace import ::tcltest::*

source ../lib.tcl

test test-sum {} -body {            
    sum 1 1
} -result 2

cleanupTests}

        }
    }

    set build_file {{app:}
{  name: __app_name__}
{  description: __app_name__ descripiton}
{  entrypoint: ./main.tcl}
{  testdir: ./tests}

{dependencies:}
{  #- https://raw.githubusercontent.com/mobilemindtec/tcl-hash/master/hash.tcl # import file}
{  #- https://github.com/mobilemindtec/tcl-hash.git # import pure tcl lib}
{  #- http-tcl # import c tcl lib}

{requirements:}
{  packages: }
{  #  - mysqltcl # check if package is installed}
{  #  - tcllib}
{  cmds:}
{  #  - curl --version # check curl is installed}
{  }
{build:}
{  cmds:}

{# TCL c lib install}
{#http-tcl:}
{#  uri: https://github.com/anticrisis/tcl-http.git}
{#  cmds:}
{#    - ./act vcpkg setup}
{#    - ./act build manifest.txt}
{#    - mkdir -p build/tcl/modules/act && mkdir -p build/tcl/packages }
{#    - cp build/http-0.1.tm build/tcl/modules/act/}
{#    - cp build/act_http/pkgIndex.tcl build/tcl/packages }
{#  imports:}
{#    - ::tcl::tm::path add [file normalize ./.tcl/tcl-http/build/tcl/modules]}
{#    - lappend ::auto_path [file normalize ./.tcl/tcl-http/build/tcl/packages]}

{# custom commands}
{commands:}}
}

tclp::main $argc $argv